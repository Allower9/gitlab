variables:
  # Используем комбинацию временной метки и хэша коммита
  TIMESTAMP: $(date +%Y%m%d%H%M%S)
  FRONTEND_IMAGE: "$CI_REGISTRY/allower/allower_ci_cd/frontend:${TIMESTAMP}-${CI_COMMIT_SHORT_SHA}"
  BACKEND_IMAGE: "$CI_REGISTRY/allower/allower_ci_cd/backend:${TIMESTAMP}-${CI_COMMIT_SHORT_SHA}"

stages:
  - build
  - deploy

build-job:
  stage: build
  image: docker:20.10.16
  tags:
    - myserver-runner
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script: 
    - docker build -t "$FRONTEND_IMAGE" ./frontend || exit 1
    - docker push "$FRONTEND_IMAGE" || exit 1
    - docker build -t "$BACKEND_IMAGE" ./backend || exit 1
    - docker push "$BACKEND_IMAGE" || exit 1
    # Для дебага выводим имена образов
    - echo "Frontend image: $FRONTEND_IMAGE"
    - echo "Backend image: $BACKEND_IMAGE"

deploy-job:
  stage: deploy
  tags:
    - myserver-runner
  variables:
    # Переопределяем имена образов для деплоя
    FRONTEND_DEPLOY_IMAGE: "$CI_REGISTRY/allower/allower_ci_cd/frontend:${TIMESTAMP}-${CI_COMMIT_SHORT_SHA}"
    BACKEND_DEPLOY_IMAGE: "$CI_REGISTRY/allower/allower_ci_cd/backend:${TIMESTAMP}-${CI_COMMIT_SHORT_SHA}"
  before_script:
    - chmod 400 $SSH_PRIVATE_KEY_FILE
  script:
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY_FILE user1@158.160.185.96 "
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
        cd /home/user1/allower_ci_cd &&
        docker-compose down &&
        docker-compose pull && 
        docker-compose up -d
      "
